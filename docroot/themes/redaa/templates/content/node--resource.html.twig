{#
/**
 * @file
 * REDAA's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{% set layout = layout ? 'layout--' ~ layout|clean_class %}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    layout ? 'grid-full',
    layout ? 'ie11-autorow',
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
<article{{ attributes.addClass(classes) }}>

{# {{dump(content)}} #}


{# and content.field_media['#items']|length > 0  #}



  {# {% if content.field_link['#items'].0.url is not empty %} #}
  {% if content.field_link['#items'].0.url is not empty or content.field_media['#items']|length > 0 %}
    <div class="layout layout--twocol-section layout--twocol-section--33-67">
      <div class="layout__region layout__region--first">


      <div class="cover">
        {% if content.field_image['#items'].0.entity is not empty %}
        {% set image_entity = content.field_image['#items'].0.entity %}
          <img src="{{ image_entity.uri.value | image_style('cover_embedded') }}" alt="{{ image_entity.alt }}" title="{{ image_entity.title }}">
        
        {% elseif node.field_media[0] is not empty  %}
          {{ node.field_media.entity|view('embedded') }}
        {% else %}
        {% endif %}
      </div>

{# 
      {% if content.field_image['#items'].0.entity is not empty %}
        {% set image_entity = content.field_image['#items'].0.entity %}
          <img src="{{ image_entity.uri.value | image_style('cover_embedded') }}" alt="{{ image_entity.alt }}" title="{{ image_entity.title }}">
        {% else %} 

        {% if content.field_media is defined and content.field_media['#items'] is not empty %}
          {% set media_items = content.field_media['#items'] %}
         
          {% if media_items[0] is not empty and media_items[0].entity is not empty %}
            {% set referenced_media = media_items[0].entity %}
            {% if referenced_media %}
              {{ drupal_entity('media', referenced_media.id(), 'embedded') }}
            {% else %}
            {% endif %}
          {% else %}
          {% endif %}
        {% else %}
        {% endif %}

      {% endif %} #}







      </div>
        <div class="layout__region layout__region--second">
        <div class="date">{{ node.getCreatedTime|date('d F Y') }}</div>
        <div class="details"> 
          {{ content.field_document_type }}
          {{ content.field_author_s_ }}
          {{ content.field_publisher }}
          <div class="comma-list">{{ content.field_organisation }}</div>
          {{ content.field_countries }}
        </div>  

          {% if content.field_link['#items'].0.url is not empty %}
          <div class="external-link">
            <span>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20px" width="20px">
                <path d="M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z" />
                <path d="M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z" />
              </svg>
            </span>
            {{ content.field_link.0 }}
          </div>
          {% else %}  
            {{ content.field_media }}
          {% endif %}

        </div>
      </div>
  
  {% else %}
    <div class="date">{{ node.getCreatedTime|date('d F Y') }}</div>
  {% endif %}



 {{ content.field_main_image }}
 {{ content.field_video }}
 {{ content.body }}



</article>


