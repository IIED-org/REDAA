<?php

/**
 * @file
 * Contains media_pdf_thumbnail.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media_pdf_thumbnail\Plugin\Field\FieldFormatter\MediaPdfThumbnailImageFieldFormatter;

/**
 * Implements hook_help().
 *
 */
function media_pdf_thumbnail_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the adimeo_pdf_thumbnail module.
    case 'help.page.media_pdf_thumbnail':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Generate a thumbnail image from a pdf file in media entity') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_file_download().
 */
function media_pdf_thumbnail_file_download($uri) {
  if (strpos($uri, 'private://') !== FALSE) {
    $pdfEntity = Drupal::service('media_pdf_thumbnail.image.manager')->getPdfEntityByPdfFileUri($uri);
    if (!empty($pdfEntity)) {
      if (Drupal::currentUser()->hasPermission('view private pdf thumbnails')) {
        return 1;
      }
      return -1;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_pdf_thumbnail_form_views_ui_config_item_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\views\Entity\View $view */
  $view = $form_state->getStorage()['view'];
  $display = $view->getExecutable()->getDisplay();
  $thumbnailField = isset($display->handlers['field']) && array_key_exists('thumbnail__target_id', $display->handlers['field']);
  $mediaPdfFormatter = isset($form['options']['type']) && $form['options']['type']['#default_value'] === 'media_pdf_thumbnail_image_field_formatter';
  if ($thumbnailField && $mediaPdfFormatter) {
    $form = _media_pdf_thumbnail_buildForm($display, $form);
    array_unshift($form['actions']['submit']['#submit'], '_media_pdf_thumbnail_form_views_ui_edit_display_submit');
  }
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::PDF_FILE_FIELD_SETTING]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::IMAGE_LINK_TYPE_SETTING]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::IMAGE_LINK_ATTRIBUTE_DOWNLOAD_SETTING]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::IMAGE_LINK_ATTRIBUTE_TARGET_SETTING]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::IMAGE_LINK_ATTRIBUTE_REL_SETTING]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::IMAGE_FORMAT_SETTINGS]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::PDF_PAGE_SETTING]);
  unset($form['options']['settings'][MediaPdfThumbnailImageFieldFormatter::IMAGE_USE_CRON]);

}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _media_pdf_thumbnail_form_views_ui_edit_display_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\views\Entity\View $view */
  $view = $form_state->getStorage()['view'];
  $display = $view->getExecutable()->getDisplay();
  $values = $form_state->getValues();
  $type = $values['options']['type'];
  if ($type == 'media_pdf_thumbnail_image_field_formatter') {
    foreach (_media_pdf_thumbnail_getFieldsList() as $bundleId => $infos) {

      $mediaBundleField = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_FIELD;
      $mediaBundlePage = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_PAGE;
      $mediaBundleLink = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_LINK;
      $mediaBundleAttributesDownload = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_DOWNLOAD;
      $mediaBundleAttributesTarget = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_TARGET;
      $mediaBundleAttributesRel = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_REL;
      $mediaBundleImageFormat = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_IMAGE_FORMAT;
      $mediaBundleUseCron = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_USE_CRON;
      $mediaBundleEnable = $bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ENABLE;

      foreach ($values['options']['settings'] as $key => $settings) {
        // For getting default values in form.
        if ($bundleId == $key) {
          $display->display['display_options'][$mediaBundleField] = $values['options']['settings'][$bundleId][$mediaBundleField];
          $display->display['display_options'][$mediaBundlePage] = $values['options']['settings'][$bundleId][$mediaBundlePage];
          $display->display['display_options'][$mediaBundleLink] = $values['options']['settings'][$bundleId][$mediaBundleLink];
          $display->display['display_options'][$mediaBundleAttributesDownload] = $values['options']['settings'][$bundleId][$mediaBundleAttributesDownload];
          $display->display['display_options'][$mediaBundleAttributesTarget] = $values['options']['settings'][$bundleId][$mediaBundleAttributesTarget];
          $display->display['display_options'][$mediaBundleAttributesRel] = $values['options']['settings'][$bundleId][$mediaBundleAttributesRel];
          $display->display['display_options'][$mediaBundleImageFormat] = $values['options']['settings'][$bundleId][$mediaBundleImageFormat];
          $display->display['display_options'][$mediaBundleUseCron] = $values['options']['settings'][$bundleId][$mediaBundleUseCron];
          $display->display['display_options'][$mediaBundleEnable] = $values['options']['settings'][$bundleId][$mediaBundleEnable];
        }
      }
      // As those files are in fielsets, values are not saved in settings storage.
      // Needing to put theme in first level of settings array.
      $values['options']['settings'][$mediaBundleField] = $values['options']['settings'][$bundleId][$mediaBundleField] ?? '';
      $values['options']['settings'][$mediaBundlePage] = $values['options']['settings'][$bundleId][$mediaBundlePage] ?? '';
      $values['options']['settings'][$mediaBundleLink] = $values['options']['settings'][$bundleId][$mediaBundleLink] ?? '';
      $values['options']['settings'][$mediaBundleAttributesDownload] = $values['options']['settings'][$bundleId][$mediaBundleAttributesDownload] ?? '';
      $values['options']['settings'][$mediaBundleAttributesTarget] = $values['options']['settings'][$bundleId][$mediaBundleAttributesTarget] ?? '';
      $values['options']['settings'][$mediaBundleAttributesRel] = $values['options']['settings'][$bundleId][$mediaBundleAttributesRel] ?? '';
      $values['options']['settings'][$mediaBundleImageFormat] = $values['options']['settings'][$bundleId][$mediaBundleImageFormat] ?? '';
      $values['options']['settings'][$mediaBundleUseCron] = $values['options']['settings'][$bundleId][$mediaBundleUseCron] ?? '';
      $values['options']['settings'][$mediaBundleEnable] = $values['options']['settings'][$bundleId][$mediaBundleEnable] ?? '';

      unset($values['options']['settings'][$bundleId]);
    }
    $form_state->setValues($values);
  }
}

/**
 * @param $display
 * @param $form
 *
 * @return array
 */
function _media_pdf_thumbnail_buildForm($display, $form) {

  // Unset image_link select from default field formatter.
  // We will give the possibility to set that option per bundle.
  unset($form['options']['settings']['image_link']);

  // Bundle options
  foreach (_media_pdf_thumbnail_getFieldsList() as $bundleId => $infos) {
    if (!empty($infos['fields'])) {
      $form['options']['settings'][$bundleId] = [
        '#type' => 'fieldset',
        '#title' => t($infos['label']),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_FIELD] = [
        '#type' => 'select',
        '#title' => t('Field to use to generate thumbnail'),
        '#description' => t('The file attached must be pdf type, otherwise it will be ignored.</br>If that field is multivalued, only the first value will be used.'),
        '#options' => $infos['fields'],
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_FIELD] ?? '',
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_PAGE] = [
        '#type' => 'number',
        '#min' => 1,
        '#title' => ('Page'),
        '#default_value' => !empty($display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_PAGE]) ? $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_PAGE] : MediaPdfThumbnailImageFieldFormatter::DEFAULT_PDF_PAGE_SETTING,
        '#description' => t('Which page to use for the thumbnail'),
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_IMAGE_FORMAT] = [
        '#type' => 'select',
        '#title' => t('Choose image format'),
        '#options' => ['jpg' => 'jpg', 'png' => 'png'],
        '#default_value' => !empty($display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_IMAGE_FORMAT]) ? $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_IMAGE_FORMAT] : MediaPdfThumbnailImageFieldFormatter::DEFAULT_IMAGE_FORMAT_SETTING,
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_LINK] = [
        '#title' => t('Link image to'),
        '#type' => 'select',
        '#empty_option' => t('Nothing'),
        '#options' => [
          'content' => t('Content'),
          'file' => t('File'),
          'pdf_file' => t('PDF File'),
        ],
        '#weight' => 0,
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_LINK] ?? '',
        '#attributes' => [
          'data-bundle-link' => $bundleId,
        ],
      ];
      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_LINK]['#attributes']['class'][] = 'thumbnail-pdf-link';

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_DOWNLOAD] = [
        '#prefix' => '<div data-bundle-attributes="' . $bundleId . '" class="fieldset"><div class="fieldset__legend"><span class="fieldset__label">' . t('HTML attributes') . '</span><div class="fieldset__wrapper">',
        '#type' => 'checkbox',
        '#title' => 'download',
        '#weight' => 0,
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_DOWNLOAD] ?? '',
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_TARGET] = [
        '#type' => 'textfield',
        '#title' => t('target') . ' :',
        '#description' => 'Ex: _self, _blank, _parent, _top',
        '#weight' => 0,
        '#size' => 5,
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_TARGET] ?? '',
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_REL] = [
        '#suffix' => '</div></div></div>',
        '#type' => 'textfield',
        '#title' => t('rel') . ' :',
        '#description' => 'Ex: alternate, author, bookmark, icon, nofollow, etc..',
        '#size' => 5,
        '#weight' => 0,
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ATTRIBUTES_REL] ?? '',
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_USE_CRON] = [
        '#type' => 'checkbox',
        '#title' => t('Use cron'),
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_USE_CRON] ?? '',
      ];

      $form['options']['settings'][$bundleId][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ENABLE] = [
        '#type' => 'checkbox',
        '#title' => t('Enable'),
        '#default_value' => $display->display['display_options'][$bundleId . MediaPdfThumbnailImageFieldFormatter::MEDIA_BUNDLE_ENABLE] ?? '',
      ];

      $form['#attached']['library'] = 'media_pdf_thumbnail/field_formatter_form';

    }
  }
  return $form;
}

/**
 * @return array
 */
function _media_pdf_thumbnail_getFieldsList() {
  $bundles = Drupal::service('entity_type.bundle.info')->getBundleInfo('media');
  $output = [];
  foreach ($bundles as $id => $bundle) {
    $output[$id]['label'] = $bundle['label'];
    foreach (Drupal::service('entity_field.manager')->getFieldDefinitions('media', $id) as $fieldDefinition) {
      if ($fieldDefinition->getType() == 'file') {
        $output[$id]['fields'][$fieldDefinition->getName()] = $fieldDefinition->getName();
      }
    }
  }
  return $output;
}

/**
 * Implements hook_entity_delete().
 */
function media_pdf_thumbnail_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'pdf_image_entity') {
    $fid = $entity->image_file_id->value;
    if ($fid) {
      Drupal::entityTypeManager()->getStorage('file')->load($fid)->delete();
      $fileUri = $entity->image_file_uri->value;
      Drupal::service('file_system')->delete($fileUri);
    }
  }
}
